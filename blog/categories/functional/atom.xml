<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional | Scriptin']]></title>
  <link href="http://dszlachta.github.io/blog/categories/functional/atom.xml" rel="self"/>
  <link href="http://dszlachta.github.io/"/>
  <updated>2013-08-28T21:53:51+02:00</updated>
  <id>http://dszlachta.github.io/</id>
  <author>
    <name><![CDATA[Dawid Szlachta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thinking Unix]]></title>
    <link href="http://dszlachta.github.io/blog/2013/08/28/thinking-unix/"/>
    <updated>2013-08-28T14:28:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/08/28/thinking-unix</id>
    <content type="html"><![CDATA[<p>This post isn&rsquo;t about operating systems. It&rsquo;s about writing good, testable
code.</p>

<p>As we all know, testing is very important. Well, it&rsquo;s so much important, that
maybe it is the most important thing to do when developing an application. On
the other hand, it&rsquo;s also important to write reusable and simple code. And good
programmer shouldn&rsquo;t forget about future &ndash; maybe a part of the codebase will
have to be changed?</p>

<!-- more -->


<p>Let&rsquo;s say we have a simple todo-list (well, <em>simple how-to-waste-my-life</em> list):
```javascript
var calendar = [</p>

<pre><code>{
    date: '2013-07-01',
    description: 'Write an operating system in JavaScript'
},
{
    date: '2030-08-01',
    description: 'Write a web application in bare C'
}
];
</code></pre>

<p>```</p>

<p>And we want to process it (that is &ndash; put date and description into a web page
in the right order). We could make it this way:</p>

<p>```javascript
function process(data) {</p>

<pre><code>var parent,
    node,
    current;

parent = $('body');

for (var i in data)
    if (data.hasOwnProperty(i)) {

        current = data[i];

        if (current.date)
            parent.append($('&lt;div&gt;&lt;b&gt;' + current.date + '&lt;/b&gt;&lt;p&gt;' + current.description + '&lt;/p&gt;&lt;/div&gt;'));
    }
</code></pre>

<p>}
```</p>

<p>So, it&rsquo;s just a simple function. We can test it, and even change it in the future. Yeah, but we can do it better.
For example testing this function answers only one question: does it output
some HTML elements or not? And we need more data. Because, if it doesn&rsquo;t make
new HTML elements, we know only that it doesn&rsquo;t work, but we don&rsquo;t know which
part fails. If a function is more complicated, we have a serious problem.</p>

<p>Now, can we reuse that function? Not much. We could modify it to take a second
argument, which would be a parent node for the output <code>div</code> element, but still
we could reuse it only when we want some HTML output.</p>

<p>The <code>process</code> function is a single function, but does tree different things:</p>

<ol>
<li>It iterates through a data collection</li>
<li>It checks a condition</li>
<li>It takes some data and puts it into the <code>body</code> element</li>
</ol>


<p>We will split those actions into different functions. Given the same <code>calendar</code>
array:</p>

<p>```javascript
/<em> Check if object has a &ldquo;date&rdquo; field </em>/
function valid(object) {</p>

<pre><code>return !!object.date;
</code></pre>

<p>}</p>

<p>/<em> Put values into correct HTML elements </em>/
function format(calendar_fragment) {</p>

<pre><code>return [
    $('&lt;b&gt;' + calendar_fragment.date + '&lt;/b&gt;'),
    $('&lt;p&gt;' + calendar_fragment.description + '&lt;/p&gt;')
];
</code></pre>

<p>}</p>

<p>/<em> Output data </em>/
function output(formatted, parent) {</p>

<pre><code>var div = $('&lt;div&gt;');

div.append(formatted[0]); 
div.append(formatted[1]); 

$(parent).append(div);
</code></pre>

<p>}</p>

<p>/<em> Iterate </em>/
function walk_calendar(data, cb) {</p>

<pre><code>  for (var i in data)
    if (data.hasOwnProperty(i)) 
        cb(data[i]);
</code></pre>

<p>}</p>

<p>function process(data) {</p>

<pre><code>walk_calendar(data, function(current) {

    if (valid(current))
        output(format(current), 'body');

});
</code></pre>

<p>}
```</p>

<p>As you see, now we have 5 functions instead of 1. Worst? No, it&rsquo;s better.</p>

<p>Any of those functions is simpler that the original one. So the whole script is
simpler to understand.</p>

<p>We can also test all of those functions and that will give us a valueable feedback (for example that function
<code>format</code> returns bad values &ndash; and it means, that <strong>this</strong> single chunk of code doesn&rsquo;t work).</p>

<p>Modifying any function written here is simple. More important, we can reuse
them. For example we could reuse function <code>walk_calendar</code> to count things, or
to draw some kind of diagram or anything. We can use <code>valid</code> later, to check
for valid objects where we need it. And if in future we decide that a <em>valid object</em> should have not
only <code>date</code> attribute, but also a description, we&rsquo;ll change only this single
function. Function <code>output</code> can be reused to output anything, like an error
message (or <em>All todos completed. You have just wasted your life,
congratulations</em> message).</p>

<p>I think I can say that this technique is the basis of functional programming.
But even if you&rsquo;re not interested in it, keeping functions simple and doing one
thing only makes your code better for testing, future-proof and gives you more free time.</p>

<p>Now the story. The title of this post is <em>Think Unix</em>. That&rsquo;s because the
Unix philosophy means creating small programs, that do only one thing, but
do it good. You can easily <em>glue</em> those programs by using Unix pipes and output
redirection (that&rsquo;s our <code>process</code> function).</p>

<p>So, think Unix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function.prototype.bind()]]></title>
    <link href="http://dszlachta.github.io/blog/2013/07/16/function-dot-bind/"/>
    <updated>2013-07-16T20:37:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/07/16/function-dot-bind</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re familiar with a concept of functional programming in JavaScript, you
should have already heard about <code>Function.prototype.bind</code> method. It looks like that:
<code>javascript
Function.prototype.bind(thisArg, arg1, arg2, ...)
// returns new function
</code>
I find this method very useful, despite it does crucial thing for functional
programming: <em>partial application</em>. But, first, I&rsquo;ll explain what else it does.</p>

<!-- more -->


<h2>Binding to Object</h2>

<p>Ok, so first thing is that you can use <code>bind()</code> to change reference to <code>this</code>
inside a function.</p>

<p>Let&rsquo;s say we have two objects like this:</p>

<p>```javascript
var human = {</p>

<pre><code>name: 'John',

getName: function() {
    return this.name;
}
</code></pre>

<p>};</p>

<p>var robot = {</p>

<pre><code>name: 'Rob',

doSomeStuff: function() {
    // ...
}
</code></pre>

<p>};
<code>``
So, people usually have names, but often they give names to things, like
robots, also. We could write</code>robot.getName()<code>method, but it would be identical
to</code>human.getName()<code>- why repeat code? We'll use</code>bind()<code>to change</code>this`
reference!</p>

<p>```javascript
robot.getName = human.getName.bind(robot);</p>

<p>human.getName();
// => &lsquo;John&rsquo;</p>

<p>robot.getName();
// => &lsquo;Rob&rsquo;</p>

<p>// btw, we could also do it anonymously:
// (human.getName.bind(robot)).call();
// but using just call() is better option here:
// human.getName.call(robot);
```
Now, it&rsquo;s time to do something really useful!</p>

<h2>Partial application</h2>

<p>Partial application means that you <em>bind</em> values to the arguments, so you don&rsquo;t
have to specify them when calling a function:</p>

<p>```javascript
function famousPerson(citizenship, name) {</p>

<pre><code>return name + ' is famous ' + citizenship;
</code></pre>

<p>}</p>

<p>famousPerson(&lsquo;French&rsquo;, &lsquo;Victor Hugo&rsquo;);</p>

<p>// => Victor Hugo is famous French</p>

<p>// now we have some Czechs, so we can bind citizenship argument to &ldquo;Czech&rdquo;
var famousCzech = famousPerson.bind(this, &lsquo;Czech&rsquo;);</p>

<p>famousCzech(&lsquo;Bohumil Hrabal&rsquo;);
famousCzech(&lsquo;Václav Havel&rsquo;);
// => Bohumil Hrabal is famous Czech
// => Václav Havel is famous Czech
```</p>

<p>That was theory. Yesterday I coded a <code>prettyPrint</code> object to format some simple
JavaScript output in a <code>div</code> (it puts numbers into <code>span.number</code>, strings into
<code>span.string</code> and so on). I had one general method, <code>prettyPrint.output()</code>:</p>

<p>```javascript</p>

<pre><code>prettyPrint: {

    output: function(className, o) {

        return ['&lt;span class="'+ className +'"&gt;', o, '&lt;/span&gt;'].join('');

    },

// ...
</code></pre>

<p><code>``
I didn't wanted to use conditional statements to decide what className argument
script should use, because the code would look a little messy. I wanted to have
simple methods, and I generated them using</code>bind()`:</p>

<p>```javascript</p>

<p>// later in code</p>

<p>var pp = this.prettyPrint,</p>

<pre><code>output = pp.output;
</code></pre>

<p>pp.number = output.bind(pp, &lsquo;number&rsquo;);
pp.string = output.bind(pp, &lsquo;string&rsquo;);
pp.fn = output.bind(pp, &lsquo;function&rsquo;);
```
This simple thing let me not only save my time, but also made code looks
simplier, which is always good.</p>

<h2>Some resources</h2>

<p>Ofcourse, read <code>bind()</code> documentation on MDN. There&rsquo;s also a great library &ndash;
underscore.js &ndash; that makes functional programming in JavaScript easier, and it
provides <code>bind()</code> function. If you&rsquo;re interested in functional programming,
check my blog, I&rsquo;ll surely write more about that topic.</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind on MDN</a></li>
<li><a href="http://underscorejs.org">underscore.js</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

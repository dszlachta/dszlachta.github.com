<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Scriptin']]></title>
  <link href="http://dszlachta.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://dszlachta.github.io/"/>
  <updated>2014-02-13T19:32:43+01:00</updated>
  <id>http://dszlachta.github.io/</id>
  <author>
    <name><![CDATA[Dawid Szlachta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The forgotten operator: in]]></title>
    <link href="http://dszlachta.github.io/blog/2014/02/13/the-forgotten-operator-in/"/>
    <updated>2014-02-13T19:04:00+01:00</updated>
    <id>http://dszlachta.github.io/blog/2014/02/13/the-forgotten-operator-in</id>
    <content type="html"><![CDATA[<p>We all know and use the good ol' <code>for in</code> loop &ndash; but it seems to me that seeing
the <code>in</code> operator in use is almost impossible &ndash; it&rsquo;s somewhat forgotten. Let&rsquo;s
have a closer look on it.</p>

<p>The <code>in</code> operator returns <code>true</code> if object member exists:</p>

<p>```javascript</p>

<p>var folk = {</p>

<pre><code>    name: 'John',
    age: 21 
};
</code></pre>

<p>&ldquo;name&rdquo; in folk; //=> true
&ldquo;address&rdquo; in folk //=> false
```</p>

<!-- more -->


<p>But there&rsquo;s something nasty (or useful &ndash; it depends) about this operator. It
returns <code>true</code> for undefined members as well. So, if the member was
declared, the <code>in</code> operator will return <code>true</code>:</p>

<p>```javascript</p>

<p>folk.address = &ldquo;Green str&rdquo;;
folk.address = undefined;</p>

<p>&ldquo;address&rdquo; in folk; //=> true
```</p>

<p>Deleting a member will cause <code>in</code> to return <code>false</code>:</p>

<p>```javascript</p>

<p>delete folk.address;</p>

<p>&ldquo;address&rdquo; in folk; //=> false
```</p>

<p>Ofcourse, <code>in</code> returns true for prototype&rsquo;s properties. Why? Because the way
JavaScript inheritance is implemented &ndash; when the JS engine can&rsquo;t find a
property in an object, it&rsquo;ll look for it in the object&rsquo;s prototype:</p>

<p><code>javascript
"toString" in folk //=&gt; true
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Unix]]></title>
    <link href="http://dszlachta.github.io/blog/2013/08/28/thinking-unix/"/>
    <updated>2013-08-28T14:28:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/08/28/thinking-unix</id>
    <content type="html"><![CDATA[<p>This post isn&rsquo;t about operating systems. It&rsquo;s about writing good, testable
code.</p>

<p>As we all know, testing is very important. Well, it&rsquo;s so much important, that
maybe it is the most important thing to do when developing an application. On
the other hand, it&rsquo;s also important to write reusable and simple code. And good
programmer shouldn&rsquo;t forget about future &ndash; maybe a part of the codebase will
have to be changed?</p>

<!-- more -->


<p>Let&rsquo;s say we have a simple todo-list (well, <em>simple how-to-waste-my-life</em> list):
```javascript
var calendar = [</p>

<pre><code>{
    date: '2013-07-01',
    description: 'Write an operating system in JavaScript'
},
{
    date: '2030-08-01',
    description: 'Write a web application in bare C'
}
];
</code></pre>

<p>```</p>

<p>And we want to process it (that is &ndash; put date and description into a web page
in the right order). We could make it this way:</p>

<p>```javascript
function process(data) {</p>

<pre><code>var parent,
    node,
    current;

parent = $('body');

for (var i in data)
    if (data.hasOwnProperty(i)) {

        current = data[i];

        if (current.date)
            parent.append($('&lt;div&gt;&lt;b&gt;' + current.date + '&lt;/b&gt;&lt;p&gt;' + current.description + '&lt;/p&gt;&lt;/div&gt;'));
    }
</code></pre>

<p>}
```</p>

<p>So, it&rsquo;s just a simple function. We can test it, and even change it in the future. Yeah, but we can do it better.
For example testing this function answers only one question: does it output
some HTML elements or not? And we need more data. Because, if it doesn&rsquo;t make
new HTML elements, we know only that it doesn&rsquo;t work, but we don&rsquo;t know which
part fails. If a function is more complicated, we have a serious problem.</p>

<p>Now, can we reuse that function? Not much. We could modify it to take a second
argument, which would be a parent node for the output <code>div</code> element, but still
we could reuse it only when we want some HTML output.</p>

<p>The <code>process</code> function is a single function, but does tree different things:</p>

<ol>
<li>It iterates through a data collection</li>
<li>It checks a condition</li>
<li>It takes some data and puts it into the <code>body</code> element</li>
</ol>


<p>We will split those actions into different functions. Given the same <code>calendar</code>
array:</p>

<p>```javascript
/<em> Check if object has a &ldquo;date&rdquo; field </em>/
function valid(object) {</p>

<pre><code>return !!object.date;
</code></pre>

<p>}</p>

<p>/<em> Put values into correct HTML elements </em>/
function format(calendar_fragment) {</p>

<pre><code>return [
    $('&lt;b&gt;' + calendar_fragment.date + '&lt;/b&gt;'),
    $('&lt;p&gt;' + calendar_fragment.description + '&lt;/p&gt;')
];
</code></pre>

<p>}</p>

<p>/<em> Output data </em>/
function output(formatted, parent) {</p>

<pre><code>var div = $('&lt;div&gt;');

div.append(formatted[0]); 
div.append(formatted[1]); 

$(parent).append(div);
</code></pre>

<p>}</p>

<p>/<em> Iterate </em>/
function walk_calendar(data, cb) {</p>

<pre><code>  for (var i in data)
    if (data.hasOwnProperty(i)) 
        cb(data[i]);
</code></pre>

<p>}</p>

<p>function process(data) {</p>

<pre><code>walk_calendar(data, function(current) {

    if (valid(current))
        output(format(current), 'body');

});
</code></pre>

<p>}
```</p>

<p>As you see, now we have 5 functions instead of 1. Worst? No, it&rsquo;s better.</p>

<p>Any of those functions is simpler that the original one. So the whole script is
simpler to understand.</p>

<p>We can also test all of those functions and that will give us a valueable feedback (for example that function
<code>format</code> returns bad values &ndash; and it means, that <strong>this</strong> single chunk of code doesn&rsquo;t work).</p>

<p>Modifying any function written here is simple. More important, we can reuse
them. For example we could reuse function <code>walk_calendar</code> to count things, or
to draw some kind of diagram or anything. We can use <code>valid</code> later, to check
for valid objects where we need it. And if in future we decide that a <em>valid object</em> should have not
only <code>date</code> attribute, but also a description, we&rsquo;ll change only this single
function. Function <code>output</code> can be reused to output anything, like an error
message (or <em>All todos completed. You have just wasted your life,
congratulations</em> message).</p>

<p>I think I can say that this technique is the basis of functional programming.
But even if you&rsquo;re not interested in it, keeping functions simple and doing one
thing only makes your code better for testing, future-proof and gives you more free time.</p>

<p>Now the story. The title of this post is <em>Think Unix</em>. That&rsquo;s because the
Unix philosophy means creating small programs, that do only one thing, but
do it good. You can easily <em>glue</em> those programs by using Unix pipes and output
redirection (that&rsquo;s our <code>process</code> function).</p>

<p>So, think Unix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two more ways to skip switch statements: Array#filter and lookup object]]></title>
    <link href="http://dszlachta.github.io/blog/2013/08/10/one-more-way-to-skip-switch-statements-array-number-filter/"/>
    <updated>2013-08-10T16:10:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/08/10/one-more-way-to-skip-switch-statements-array-number-filter</id>
    <content type="html"><![CDATA[<p>So the truth is: I don&rsquo;t like <code>switch</code> statements. They make my code look
messy and they require me to type more. Few days ago I got an interesting idea
to avoid them.</p>

<p>Let&rsquo;s say we need to check if a given string represents a name of the day of
the week. Traditional code would look like this:</p>

<!-- more -->


<p>```javascript
function is_dayname(string) {</p>

<p>  var r;</p>

<p>  switch(string) {</p>

<pre><code>case 'Monday':
case 'Tuesday':
case 'Wednesday':
case 'Thursday':
case 'Friday':
case 'Saturday':
case 'Sunday':
  r = true;
  break;
default:
  r = false;
  break;
</code></pre>

<p>  }</p>

<p>  return r;</p>

<p>}</p>

<p>// is_dayname(&lsquo;not_a_day&rsquo;)
// => false
// is_dayname(&lsquo;Monday&rsquo;)
// => true
```</p>

<p>That&rsquo;s too much code to achieve this simple functionality. Names of the
days are some kind of list, aren&rsquo;t they? So we could put them into an array:</p>

<p>```javascript
var daynames = [</p>

<pre><code>    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 
    'Friday', 'Saturday', 'Sunday' 
];
</code></pre>

<p>```</p>

<p>And now what? Well, we just need to check if a condition <em>(something) is a name of the day</em> is true, or not. But we
have an array, not a primitive value that can be checked using single <code>if</code>.
Yes, but we also have a handful <code>Array#filter</code> method. Citing
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">MDN</a>:</p>

<blockquote><p><code>Array#filter</code> creates a new array with all elements that pass the test implemented by the provided function.</p></blockquote>

<p>So, if no elements pass the test, returned array will be empty. And that can be
easily checked:</p>

<p>```javascript
function is_dayname(string) {</p>

<p>  /<em> Check if passed value &lsquo;v&rsquo; (name of the day)
   * is the same as &lsquo;string&rsquo;
   </em>/
  var test = function(v) {</p>

<pre><code>return v == string 
</code></pre>

<p>  };</p>

<p>  if(daynames.filter(test).length)</p>

<pre><code>return true;
</code></pre>

<p>  else</p>

<pre><code>return false;  
</code></pre>

<p>}</p>

<p>// is_dayname(&lsquo;not_a_day&rsquo;)
// => false
// is_dayname(&lsquo;Monday&rsquo;)
// => true</p>

<p>```</p>

<p>It requires less typing and can be easily made reusable.</p>

<h2>Lookup Object</h2>

<p>This technique is almost identical to <a href="/blog/2013/06/03/lookup-tables-say-goodbye-to-conditional-statements/">Lookup Tables</a>, but it uses object instead of an array:</p>

<p>```javascript
var daynames = {
  &lsquo;Monday&rsquo;: true,
  &lsquo;Tuesday&rsquo;: true,
  &lsquo;Wednesday&rsquo;: true,
  &lsquo;Thursday&rsquo;: true,
  &lsquo;Friday&rsquo;: true,
  &lsquo;Saturday&rsquo;: true,
  &lsquo;Sunday&rsquo;: true
};</p>

<p>function is_dayname(string) {</p>

<p>  return daynames[string] ? true : false;</p>

<p>}</p>

<p>// is_dayname(&lsquo;not_a_day&rsquo;)
// => false
// is_dayname(&lsquo;Monday&rsquo;)
// => true
```</p>

<p>Lookup Object saves the biggest amount of time, but it&rsquo;s not so reusable as
using <code>filter</code>.</p>

<p>Both techniques are slower than <code>switch</code> &ndash; see <a href="http://jsperf.com/filter-vs-lookup-object">jsperf test</a> &ndash;
but less verbose, easier to maintain and save time. I don&rsquo;t say performance
isn&rsquo;t important. But sometimes we don&rsquo;t need top-speed app and sometimes we
perform some operations on small data amounts. In such case, lookup object or
<code>filter</code> are good enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function.prototype.bind()]]></title>
    <link href="http://dszlachta.github.io/blog/2013/07/16/function-dot-bind/"/>
    <updated>2013-07-16T20:37:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/07/16/function-dot-bind</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re familiar with a concept of functional programming in JavaScript, you
should have already heard about <code>Function.prototype.bind</code> method. It looks like that:
<code>javascript
Function.prototype.bind(thisArg, arg1, arg2, ...)
// returns new function
</code>
I find this method very useful, despite it does crucial thing for functional
programming: <em>partial application</em>. But, first, I&rsquo;ll explain what else it does.</p>

<!-- more -->


<h2>Binding to Object</h2>

<p>Ok, so first thing is that you can use <code>bind()</code> to change reference to <code>this</code>
inside a function.</p>

<p>Let&rsquo;s say we have two objects like this:</p>

<p>```javascript
var human = {</p>

<pre><code>name: 'John',

getName: function() {
    return this.name;
}
</code></pre>

<p>};</p>

<p>var robot = {</p>

<pre><code>name: 'Rob',

doSomeStuff: function() {
    // ...
}
</code></pre>

<p>};
<code>``
So, people usually have names, but often they give names to things, like
robots, also. We could write</code>robot.getName()<code>method, but it would be identical
to</code>human.getName()<code>- why repeat code? We'll use</code>bind()<code>to change</code>this`
reference!</p>

<p>```javascript
robot.getName = human.getName.bind(robot);</p>

<p>human.getName();
// => &lsquo;John&rsquo;</p>

<p>robot.getName();
// => &lsquo;Rob&rsquo;</p>

<p>// btw, we could also do it anonymously:
// (human.getName.bind(robot)).call();
// but using just call() is better option here:
// human.getName.call(robot);
```
Now, it&rsquo;s time to do something really useful!</p>

<h2>Partial application</h2>

<p>Partial application means that you <em>bind</em> values to the arguments, so you don&rsquo;t
have to specify them when calling a function:</p>

<p>```javascript
function famousPerson(citizenship, name) {</p>

<pre><code>return name + ' is famous ' + citizenship;
</code></pre>

<p>}</p>

<p>famousPerson(&lsquo;French&rsquo;, &lsquo;Victor Hugo&rsquo;);</p>

<p>// => Victor Hugo is famous French</p>

<p>// now we have some Czechs, so we can bind citizenship argument to &ldquo;Czech&rdquo;
var famousCzech = famousPerson.bind(this, &lsquo;Czech&rsquo;);</p>

<p>famousCzech(&lsquo;Bohumil Hrabal&rsquo;);
famousCzech(&lsquo;Václav Havel&rsquo;);
// => Bohumil Hrabal is famous Czech
// => Václav Havel is famous Czech
```</p>

<p>That was theory. Yesterday I coded a <code>prettyPrint</code> object to format some simple
JavaScript output in a <code>div</code> (it puts numbers into <code>span.number</code>, strings into
<code>span.string</code> and so on). I had one general method, <code>prettyPrint.output()</code>:</p>

<p>```javascript</p>

<pre><code>prettyPrint: {

    output: function(className, o) {

        return ['&lt;span class="'+ className +'"&gt;', o, '&lt;/span&gt;'].join('');

    },

// ...
</code></pre>

<p><code>``
I didn't wanted to use conditional statements to decide what className argument
script should use, because the code would look a little messy. I wanted to have
simple methods, and I generated them using</code>bind()`:</p>

<p>```javascript</p>

<p>// later in code</p>

<p>var pp = this.prettyPrint,</p>

<pre><code>output = pp.output;
</code></pre>

<p>pp.number = output.bind(pp, &lsquo;number&rsquo;);
pp.string = output.bind(pp, &lsquo;string&rsquo;);
pp.fn = output.bind(pp, &lsquo;function&rsquo;);
```
This simple thing let me not only save my time, but also made code looks
simplier, which is always good.</p>

<h2>Some resources</h2>

<p>Ofcourse, read <code>bind()</code> documentation on MDN. There&rsquo;s also a great library &ndash;
underscore.js &ndash; that makes functional programming in JavaScript easier, and it
provides <code>bind()</code> function. If you&rsquo;re interested in functional programming,
check my blog, I&rsquo;ll surely write more about that topic.</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind on MDN</a></li>
<li><a href="http://underscorejs.org">underscore.js</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lookup Tables: Say Goodbye to Conditional Statements]]></title>
    <link href="http://dszlachta.github.io/blog/2013/06/03/lookup-tables-say-goodbye-to-conditional-statements/"/>
    <updated>2013-06-03T20:54:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/06/03/lookup-tables-say-goodbye-to-conditional-statements</id>
    <content type="html"><![CDATA[<p>Have you ever wonder how to get rid of all those <code>if</code>s and <code>switch</code>es in your
code? Well, it&rsquo;s possible thanks to the technique known as <strong>Lookup tables</strong>.</p>

<p>It&rsquo;s simple. If you&rsquo;re using conditional statements to check for some numbers
(or things that can be represented by numbers), you can populate an array with
values (like functions) you need, instead.</p>

<p>``` javascript</p>

<pre><code>function getName(id) {

    switch (id) {
        case 0:
            return 'Ann';
            break;
        case 1:
            return 'John';
            break;
        case 2:
            return 'Kate';
            break;
    }

}
</code></pre>

<p>```
Can be simplified to:</p>

<p>``` javascript</p>

<pre><code>var names = [ 'Ann', 'John', 'Kate' ];

function getName(id) {
    return names[id];
}
</code></pre>

<p>```</p>

<!-- more -->


<p>Let&rsquo;s think about some more complicated example, like capturing the keys user
presses. Normally, you need a huge <code>switch</code> statement, don&rsquo;t you?</p>

<p>First, let&rsquo;s prepare our playground:</p>

<p>``` javascript</p>

<pre><code>var Keys = window.Keys = {

    /* our lookup table */
    bindings: [],

    /* helper function; binds callback to item in the lookup table */
    bind: function(code, fn) {

        this.bindings[code] = fn;

    },

    /* this returns callback from the lookup table */
    perform: function(code) {

        return this.bindings[code];

    }

}
</code></pre>

<p>```</p>

<p>Looks fine, but what if there&rsquo;s no such key code in the table? Let&rsquo;s add an
empty function <code>defaultAction</code> to the <code>Keys</code> object:</p>

<p>``` javascript</p>

<pre><code>defaultAction: function() {},
</code></pre>

<p>```</p>

<p>We have to modify <code>Keys.perform</code> to return binded function or
<code>defaultAction</code>:</p>

<p>``` javascript</p>

<pre><code>perform: function(code) {

    /* return function binded to key code. If there's no function
     * binded, return default function 
     */
    return this.bindings[code] || this.defaultAction;

}
</code></pre>

<p>```</p>

<p>That&rsquo;s all. Now we can bind some keys and functions and perform some actions
like this:</p>

<p>``` javascript</p>

<pre><code>Keys.bind('o'.toUpperCase().charCodeAt(0), function() {
    console.log('You pressed o!');
});

window.onkeydown = function(event) {

    Keys.perform(event.keyCode).call(this, null);

};
</code></pre>

<p>```</p>

<p>I&rsquo;ve made a demo of simple
script that, when user presses a key, adds a letter to a <code>div</code> element. If letter
matches any letter of world <em>google</em>, script will put this letter in the same
colour as in Google&rsquo;s logo.</p>

<p>See code here: <a href="https://github.com/dszlachta/demos/googlefier">https://github.com/dszlachta/demos/googlefier</a> (note how I coded inserting <em>o</em> in different colours without usign any <code>if</code>
statements :) )</p>

<p>Why lookup tables are better than big <code>switch</code> statements? Code is simplier
(and that means it&rsquo;s better) and you get a performance boost (the JS engine
don&rsquo;t have to check values). You can read more about lookup tables in Nicholas
C. Zakas' book <em>High Performance JavaScript</em>.</p>
]]></content>
  </entry>
  
</feed>

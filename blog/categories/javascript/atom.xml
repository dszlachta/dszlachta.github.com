<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Scriptin']]></title>
  <link href="http://dszlachta.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://dszlachta.github.io/"/>
  <updated>2013-06-09T11:56:10+02:00</updated>
  <id>http://dszlachta.github.io/</id>
  <author>
    <name><![CDATA[Dawid Szlachta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lookup Tables: Say Goodbye to Conditional Statements]]></title>
    <link href="http://dszlachta.github.io/blog/2013/06/03/lookup-tables-say-goodbye-to-conditional-statements/"/>
    <updated>2013-06-03T20:54:00+02:00</updated>
    <id>http://dszlachta.github.io/blog/2013/06/03/lookup-tables-say-goodbye-to-conditional-statements</id>
    <content type="html"><![CDATA[<p>Have you ever wonder how to get rid of all those <code>if</code>s and <code>switch</code>es in your
code? Well, it&rsquo;s possible thanks to the technique known as <strong>Lookup tables</strong>.</p>

<p>It&rsquo;s simple. If you&rsquo;re using conditional statements to check for some numbers
(or things that can be represented by numbers), you can populate an array with
values (like functions) you need, instead.</p>

<!-- more -->


<p>``` javascript</p>

<pre><code>function getName(id) {

    switch (id) {
        case 0:
            return 'Ann';
            break;
        case 1:
            return 'John';
            break;
        case 2:
            return 'Kate';
            break;
    }

}
</code></pre>

<p>```
Can be simplified to:</p>

<p>``` javascript</p>

<pre><code>var names = [ 'Ann', 'John', 'Kate' ];

function getName(id) {
    return names[id];
}
</code></pre>

<p>```</p>

<p>Let&rsquo;s think about some more complicated example, like capturing the keys user
presses. Normally, you need a huge <code>switch</code> statement, don&rsquo;t you?</p>

<p>First, let&rsquo;s prepare our playground:</p>

<p>``` javascript</p>

<pre><code>var Keys = window.Keys = {

    /* our lookup table */
    bindings: [],

    /* helper function; binds callback to item in the lookup table */
    bind: function(code, fn) {

        this.bindings[code] = fn;

    },

    /* this returns callback from the lookup table */
    perform: function(code) {

        return this.bindings[code];

    }

}
</code></pre>

<p>```</p>

<p>Looks fine, but what if there&rsquo;s no such key code in the table? Let&rsquo;s add an
empty function <code>defaultAction</code> to the <code>Keys</code> object:</p>

<p>``` javascript</p>

<pre><code>defaultAction: function() {},
</code></pre>

<p>```</p>

<p>We have to modify <code>Keys.perform</code> to return binded function or
<code>defaultAction</code>:</p>

<p>``` javascript</p>

<pre><code>perform: function(code) {

    /* return function binded to key code. If there's no function
     * binded, return default function 
     */
    return this.bindings[code] || this.defaultAction;

}
</code></pre>

<p>```</p>

<p>That&rsquo;s all. Now we can bind some keys and functions and perform some actions
like this:</p>

<p>``` javascript</p>

<pre><code>Keys.bind('o'.toUpperCase().charCodeAt(0), function() {
    console.log('You pressed o!');
});

window.onkeydown = function(event) {

    Keys.perform(event.keyCode).call(this, null);

};
</code></pre>

<p>```</p>

<p>I&rsquo;ve made a demo of simple
script that, when user presses a key, adds a letter to a <code>div</code> element. If letter
matches any letter of world <em>google</em>, script will put this letter in the same
colour as in Google&rsquo;s logo.</p>

<p>See code here: <a href="https://github.com/dszlachta/demos/googlefier">https://github.com/dszlachta/demos/googlefier</a> (note how I coded inserting <em>o</em> in different colours without usign any <code>if</code>
statements :) )</p>

<p>Why lookup tables are better than big <code>switch</code> statements? Code is simplier
(and that means it&rsquo;s better) and you get a performance boost (the JS engine
don&rsquo;t have to check values). You can read more about lookup tables in Nicholas
C. Zakas' book <em>High Performance JavaScript</em>.</p>
]]></content>
  </entry>
  
</feed>
